/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package us.physionconsulting.ovation.browser;

import java.util.HashMap;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.Lookup.Result;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import ovation.IAuthenticatedDataStoreCoordinator;
import us.physion.ovation.interfaces.ConnectionProvider;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//us.physionconsulting.ovation.browser//Browser//EN",
autostore = false)
@TopComponent.Description(preferredID = "BrowserTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "us.physionconsulting.ovation.browser.BrowserTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_BrowserAction",
preferredID = "BrowserTopComponent")
@Messages({
    "CTL_BrowserAction=Browser",
    "CTL_BrowserTopComponent=Browser Window",
    "HINT_BrowserTopComponent=Browse your Ovation Database"
})
public final class BrowserTopComponent extends TopComponent implements ExplorerManager.Provider{

    private final ExplorerManager em = new ExplorerManager();
    private HashMap<String, Node> browserMap = new HashMap();
    public BrowserTopComponent() {
        initComponents();
        setName(Bundle.CTL_BrowserTopComponent());
        setToolTipText(Bundle.HINT_BrowserTopComponent());
        
        associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
       
        Lookup.Template template = new Lookup.Template(ConnectionProvider.class);
        final Lookup.Result result = Lookup.getDefault().lookup(template);
        result.addLookupListener(new LookupListener() {
            @Override
            public void resultChanged(LookupEvent e) {
                recreateTreeComponent();
            }
        });
        recreateTreeComponent();
    }
    
    private void recreateTreeComponent()
    {
        em.setRootContext(new AbstractNode(Children.create(new EntityChildFactory(null, browserMap), true)));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        treeViewPane = new BeanTreeView();
        plusButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(plusButton, org.openide.util.NbBundle.getMessage(BrowserTopComponent.class, "BrowserTopComponent.plusButton.text")); // NOI18N
        plusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(treeViewPane, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(plusButton)
                .addContainerGap(319, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(treeViewPane, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(plusButton)
                .addContainerGap(8, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void plusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusButtonActionPerformed
        Result<EntityWrapper> r = getLookup().lookupResult(EntityWrapper.class);
        for (EntityWrapper ew :r.allInstances())
        {
            plusButton.setText(ew.getDisplayName());
        }
        if (r.allInstances().size() == 0)
        {
            plusButton.setText("+");
        }
    }//GEN-LAST:event_plusButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton plusButton;
    private javax.swing.JScrollPane treeViewPane;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
         //root node in tree view. true = asynchronously
         recreateTreeComponent();
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }
}
